/**
 * fs.open()
 * 
 * 异步地打开文件
 * 语法：fs.open(path, flags[, mode], callback)
 * 参数：
 * (1)path      - 文件的路径
 * (2)flags     - 文件打开的行为
 * (3)mode      - 设置文件模式(权限)，文件创建默认权限为 0666(可读，可写)
 * (4)callback  - 回调函数，带有两个参数如：callback(err, fd)
 *                fd是一个整数，表示打开文件返回的文件描述符，window中又称文件句柄
 */

/**
 * 文件句柄和文件描述符
 * 
 * 文件句柄是win里面的叫法，文件描述符是linux里面的叫法
 * 
 * 解释：句柄是window用来标识被应用程序所建立或使用的对象的唯一整数，window使用各种各样的句柄标识
 *      诸如应用程序实例，窗口，控制，位图，GDI对象等等。
 *      句柄是一个标识符，是拿来标识对象或者项目的，它就象我们的姓名一样，每个人都会有一个，
 *      不同的人的姓名不一样，但是，也可能有一个名字和你一样的人。
 * 
 *      总结：在windows中，句柄是和对象一一对应的32位无符号整数值。
 *              对象可以映射到唯一的句柄，句柄也可以映射到唯一的对象。
 * 
 *      为什么我们需要句柄？
 *      更准确地说，是windows需要句柄。windows需要向程序员提供必要地编程接口，
 *      在这些接口中，允许程序员访问、创建和销毁对象。但是，出于封装地考虑，
 *      windows并不想向程序员返回指针。指针包含了太多的信息
 */

const fs = require('fs');

console.log('准备打开文件');

fs.open(`${__dirname }/open.txt`, 'r+', (err, fd) => {
    if (err) {
        throw new Error(err);
    }

    console.log('文件打开成功');
    console.log(fd);
});

/**
    Flag	描述
    r	    以读取模式打开文件。如果文件不存在抛出异常。
    r+	    以读写模式打开文件。如果文件不存在抛出异常。
    rs	    以同步的方式读取文件。
    rs+	    以同步的方式读取和写入文件。
    w	    以写入模式打开文件，如果文件不存在则创建。
    wx	    类似 'w'，但是如果文件路径存在，则文件写入失败。
    w+	    以读写模式打开文件，如果文件不存在则创建。
    wx+	    类似 'w+'， 但是如果文件路径存在，则文件读写失败。
    a	    以追加模式打开文件，如果文件不存在则创建。
    ax	    类似 'a'， 但是如果文件路径存在，则文件追加失败。
    a+	    以读取追加模式打开文件，如果文件不存在则创建。
    ax+	    类似 'a+'， 但是如果文件路径存在，则文件读取追加失败。
 */
